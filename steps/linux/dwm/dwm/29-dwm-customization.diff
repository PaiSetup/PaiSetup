diff --git a/config.def.h b/config.def.h
index 4066601..1205f54 100644
--- a/config.def.h
+++ b/config.def.h
@@ -8,43 +8,53 @@ static  unsigned int gappx     = 5;        /* gaps between windows */
 static  unsigned int snap      = 32;       /* snap pixel */
 static  int showbar            = 1;        /* 0 means no bar */
 static  int topbar             = 1;        /* 0 means bottom bar */
-static const char *fonts[]          = { "monospace:size=10" };
-static const char dmenufont[]       = "monospace:size=10";
+static const char *fonts[]          = { "monospace:size=15", "JoyPixels:size=11" };
 static char normbgcolor[]           = "#222222";
 static char normbordercolor[]       = "#444444";
 static char normfgcolor[]           = "#bbbbbb";
 static char selfgcolor[]            = "#eeeeee";
 static char selbordercolor[]        = "#005577";
 static char selbgcolor[]            = "#005577";
-static char col_black[]       = "#000000";
-static char col_red[]         = "#ff0000";
-static char col_yellow[]      = "#ffff00";
-static char col_white[]       = "#ffffff";
+static char appbarbgcolor[]         = "#333333";
+static char statusbarcolor1[]       = "#000000";
+static char statusbarcolor2[]       = "#ffff00";
+
 static char *colors[][3] = {
-       /*               fg           bg           border   */
-       [SchemeNorm]   = { normfgcolor, normbgcolor, normbordercolor },
-       [SchemeSel]    = { selfgcolor,  selbgcolor,  selbordercolor  },
-       [SchemeWarn]   = { col_black, col_yellow, col_red },
-       [SchemeUrgent] = { col_white, col_red,    col_red },
+       /*                         fg                  bg                     border   */
+       [SchemeNorm]           = { normfgcolor,        normbgcolor,           normbordercolor },      // 1
+       [SchemeSel]            = { selfgcolor,         selbgcolor,            selbordercolor  },      // 2
+       [SchemeAppBar]         = { selfgcolor,         appbarbgcolor,         normbordercolor  },     // 3
+       [SchemeStatusBarStart] = { statusbarcolor2,    appbarbgcolor,         normbordercolor  },     // 4
+       [SchemeStatusBar1]     = { statusbarcolor1,    statusbarcolor2,       normbordercolor  },     // 5
+       [SchemeStatusBar2]     = { statusbarcolor2,    statusbarcolor1,       normbordercolor  },     // 6
 };
 
 /* tagging */
-static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };
+static const int defaultViewedTag = 1 << 2;
+static const char *tags[] = { "", "", "", "", "", "", "", "", "" };
 
 static const Rule rules[] = {
 	/* xprop(1):
 	 *	WM_CLASS(STRING) = instance, class
 	 *	WM_NAME(STRING) = title
 	 */
-	/* class      instance    title       tags mask     isfloating   monitor  disableborder  utilwindow*/
-	{ "Gimp",     NULL,       NULL,       0,            1,           -1,      0,             0 },
-	{ "Firefox",  NULL,       NULL,       1 << 8,       0,           -1,      0,             0 },
+	/* class          instance    title       tags mask          isfloating   monitor disableborder      utilwindow*/
+	{ "firefox",      NULL,       NULL,       1 << 0,            0,           -1,     0,                 0 },
+	{ "Chromium",     NULL,       NULL,       1 << 0,            0,           -1,     0,                 0 },
+//	{ "code-oss",     NULL,       NULL,       1 << 1,            0,           -1,     0,                 0 },
+	{ "Gimp",         NULL,       NULL,       1 << 6,            0,           -1,     0,                 0 },
+	{ "vlc",          NULL,       NULL,       1 << 7,            0,           -1,     0,                 0 },
+	{ "Rhythmbox",    NULL,       NULL,       1 << 8,            0,           -1,     0,                 0 },
+	{ "Synapse",      NULL,       NULL,       0,                 0,           -1,     1,                 0 },
+	{ "Yad",          NULL,       NULL,       0,                 1,           -1,     0,                 1 },
+	{ "stalonetray",  NULL,       NULL,       TAGMASK,           0,           -1,     1,                 1 },
+	{ "LearnOpenGL",  NULL,       NULL,       1 << 3,            1,           -1,     0,                 0 },
 };
 
 /* layout(s) */
 static float mfact     = 0.55; /* factor of master area size [0.05..0.95] */
 static int nmaster     = 1;    /* number of clients in master area */
-static int resizehints = 1;    /* 1 means respect size hints in tiled resizals */
+static int resizehints = 0;    /* 1 means respect size hints in tiled resizals */
 
 static const Layout layouts[] = {
 	/* symbol     arrange function */
@@ -54,7 +64,8 @@ static const Layout layouts[] = {
 };
 
 /* key definitions */
-#define MODKEY Mod1Mask
+#define MODKEY Mod4Mask
+#define ALT_MASK Mod1Mask
 #define TAGKEYS(KEY,TAG) \
 	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
 	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
@@ -66,8 +77,7 @@ static const Layout layouts[] = {
 
 /* commands */
 static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
-static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", normbgcolor, "-nf", normfgcolor, "-sb", selbordercolor, "-sf", selfgcolor, NULL };
-static const char *termcmd[]  = { "st", NULL };
+static const char *dmenucmd[] = { "dmenu_run", NULL };
 
 /*
  * Xresources preferences to load at startup
@@ -79,19 +89,25 @@ ResourcePref resources[] = {
 		{ "selbgcolor",         STRING,  &selbgcolor },
 		{ "selbordercolor",     STRING,  &selbordercolor },
 		{ "selfgcolor",         STRING,  &selfgcolor },
+		{ "appbarbgcolor",    	STRING,   &appbarbgcolor },
+		{ "statusbarcolor1",  	STRING,   &statusbarcolor1 },
+		{ "statusbarcolor2",   	STRING,   &statusbarcolor2 },
 		{ "borderpx",          	INTEGER, &borderpx },
 		{ "snap",          		INTEGER, &snap },
 		{ "showbar",          	INTEGER, &showbar },
 		{ "topbar",          	INTEGER, &topbar },
 		{ "nmaster",          	INTEGER, &nmaster },
 		{ "resizehints",       	INTEGER, &resizehints },
+		{ "gappx",       	    INTEGER, &gappx },
+		{ "sidepad",       	    INTEGER, &sidepad },
+		{ "sidepad",       	    INTEGER, &sidepad },
 		{ "mfact",      	 	FLOAT,   &mfact },
 };
 
 static Key keys[] = {
 	/* modifier                     key        function        argument */
 	{ MODKEY,                       XK_p,      spawn,          {.v = dmenucmd } },
-	{ MODKEY|ShiftMask,             XK_Return, spawn,          {.v = termcmd } },
+	{ MODKEY,                       XK_r,      spawn,          {.v = dmenucmd } },
 	{ MODKEY,                       XK_b,      togglebar,      {0} },
 	{ MODKEY,                       XK_j,      focusstack,     {.i = +1 } },
 	{ MODKEY,                       XK_k,      focusstack,     {.i = -1 } },
@@ -102,11 +118,16 @@ static Key keys[] = {
 	{ MODKEY,                       XK_Return, zoom,           {0} },
 	{ MODKEY,                       XK_Tab,    view,           {0} },
 	{ MODKEY|ShiftMask,             XK_c,      killclient,     {0} },
+	{ ALT_MASK,                     XK_F4,      killclient,     {0} },
 	{ MODKEY,                       XK_t,      setlayout,      {.v = &layouts[0]} },
 	{ MODKEY,                       XK_f,      setlayout,      {.v = &layouts[1]} },
 	{ MODKEY,                       XK_m,      setlayout,      {.v = &layouts[2]} },
 	{ MODKEY,                       XK_space,  setlayout,      {0} },
 	{ MODKEY|ShiftMask,             XK_space,  togglefloating, {0} },
+	{ MODKEY,                       XK_Left,   cycleview,      {.i = 1 } },
+	{ MODKEY,                       XK_Right,  cycleview,      {.i = -1 } },
+	{ ALT_MASK|ShiftMask,           XK_Tab,    cycleview,      {.i = 1 } },
+	{ ALT_MASK,                     XK_Tab,    cycleview,      {.i = -1 } },
 	{ MODKEY,                       XK_0,      view,           {.ui = ~0 } },
 	{ MODKEY|ShiftMask,             XK_0,      tag,            {.ui = ~0 } },
 	{ MODKEY,                       XK_comma,  focusmon,       {.i = -1 } },
@@ -116,6 +137,7 @@ static Key keys[] = {
 	{ MODKEY,                       XK_minus,  setgaps,        {.i = -1 } },
 	{ MODKEY,                       XK_equal,  setgaps,        {.i = +1 } },
 	{ MODKEY|ShiftMask,             XK_equal,  setgaps,        {.i = 0  } },
+	TAGKEYS(                        XK_Home,                   0)
 	TAGKEYS(                        XK_1,                      0)
 	TAGKEYS(                        XK_2,                      1)
 	TAGKEYS(                        XK_3,                      2)
@@ -125,6 +147,7 @@ static Key keys[] = {
 	TAGKEYS(                        XK_7,                      6)
 	TAGKEYS(                        XK_8,                      7)
 	TAGKEYS(                        XK_9,                      8)
+	TAGKEYS(                        XK_End,                    8)
 	{ MODKEY|ShiftMask,             XK_q,      quit,           {0} },
 	{ MODKEY|ControlMask|ShiftMask, XK_q,      quit,           {1} },
 };
@@ -139,12 +162,14 @@ static Button buttons[] = {
 	{ ClkStatusText,        0,              Button1,        sigdwmblocks,   {.i = 1} },
 	{ ClkStatusText,        0,              Button2,        sigdwmblocks,   {.i = 2} },
 	{ ClkStatusText,        0,              Button3,        sigdwmblocks,   {.i = 3} },
+	{ ClkStatusText,        0,              Button4,        sigdwmblocks,   {.i = 4} },
+	{ ClkStatusText,        0,              Button5,        sigdwmblocks,   {.i = 5} },
 	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
 	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
 	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
 	{ ClkTagBar,            0,              Button1,        view,           {0} },
 	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
-	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
-	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
+	{ ClkTagBar,            0,              Button4,        cycleview,      {.i = -1} },
+	{ ClkTagBar,            0,              Button5,        cycleview,      {.i = 1} },
 };
 
diff --git a/dwm.c b/dwm.c
index d131870..dccdf72 100644
--- a/dwm.c
+++ b/dwm.c
@@ -56,11 +56,12 @@
 #define WIDTH(X)                ((X)->w + 2 * (X)->bw)
 #define HEIGHT(X)               ((X)->h + 2 * (X)->bw)
 #define TAGMASK                 ((1 << LENGTH(tags)) - 1)
+#define STRW(X)                 (drw_fontset_getwidth(drw, (X)))
 #define TEXTW(X)                (drw_fontset_getwidth(drw, (X)) + lrpad)
 
 /* enums */
 enum { CurNormal, CurResize, CurMove, CurLast }; /* cursor */
-enum { SchemeNorm, SchemeSel, SchemeWarn, SchemeUrgent }; /* color schemes */
+enum { SchemeNorm, SchemeSel, SchemeAppBar, SchemeStatusBarStart, SchemeStatusBar1, SchemeStatusBar2 }; /* color schemes */
 enum { NetSupported, NetWMName, NetWMState, NetWMCheck,
        NetWMFullscreen, NetActiveWindow, NetWMWindowType,
        NetWMWindowTypeDialog, NetClientList, NetLast }; /* EWMH atoms */
@@ -466,7 +467,7 @@ buttonpress(XEvent *e)
 		selmon = m;
 		focus(NULL);
 	}
-	if (ev->window == selmon->barwin) {
+	if (ev->x >= sp && ev->x <= m->ww - sp && ev->y <= bh + sp) {
 		i = x = 0;
 		do
 			x += TEXTW(tags[i]);
@@ -719,7 +720,7 @@ createmon(void)
 	Monitor *m;
 
 	m = ecalloc(1, sizeof(Monitor));
-	m->tagset[0] = m->tagset[1] = 1;
+	m->tagset[0] = m->tagset[1] = defaultViewedTag;
 	m->mfact = mfact;
 	m->nmaster = nmaster;
 	m->showbar = showbar;
@@ -834,14 +835,22 @@ drawbar(Monitor *m)
 	drw_setscheme(drw, scheme[SchemeNorm]);
 	x = drw_text(drw, x, 0, w, bh, lrpad / 2, m->ltsymbol, 0);
 
+	const char *tagEndingSymbol = "";
+	drw_setscheme(drw, scheme[SchemeAppBar]);
+	w = blw = STRW(tagEndingSymbol);
+	x = drw_text(drw, x, 0, w, bh, 0, tagEndingSymbol, 0);
+
 	if ((w = m->ww - sw - x) > bh) {
 		if (m->sel && !m->sel->utilwindow) {
-			drw_setscheme(drw, scheme[m == selmon ? SchemeSel : SchemeNorm]);
-			drw_text(drw, x, 0, w - 2 * sp, bh, lrpad / 2, m->sel->name, 0);
+			int spaceForName = m->ww - x - tx - 2*sp;
+			int mid = (spaceForName - (int)TEXTW(m->sel->name)) / 2 ;
+			mid = mid >= lrpad / 2 ? mid : lrpad / 2;
+			drw_setscheme(drw, scheme[SchemeAppBar]);
+			drw_text(drw, x, 0, w - 2 * sp, bh, mid, m->sel->name, 0);
 			if (m->sel->isfloating)
 				drw_rect(drw, x + boxs, boxs, boxw, boxw, m->sel->isfixed, 0);
 		} else {
-			drw_setscheme(drw, scheme[SchemeNorm]);
+			drw_setscheme(drw, scheme[SchemeAppBar]);
 			drw_rect(drw, x, 0, w - 2 * sp, bh, 1, 1);
 		}
 	}
