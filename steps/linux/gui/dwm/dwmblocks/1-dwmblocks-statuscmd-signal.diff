diff --git a/dwmblocks.c b/dwmblocks.c
index ded717c..5500189 100644
--- a/dwmblocks.c
+++ b/dwmblocks.c
@@ -28,8 +28,9 @@ typedef struct {
 void dummysighandler(int num);
 #endif
 void sighandler(int num);
+void buttonhandler(int sig, siginfo_t *si, void *ucontext);
 void getcmds(int time);
-void getsigcmds(unsigned int signal);
+void getsigcmds(unsigned int signal, const char *button);
 void setupsignals();
 void sighandler(int signum);
 int getstatus(char *str, char *last);
@@ -56,10 +57,23 @@ static int statusContinue = 1;
 static int returnStatus = 0;
 
 //opens process *cmd and stores output in *output
-void getcmd(const Block *block, char *output)
+void getcmd(const Block *block, char *output, const char *button)
 {
-	strcpy(output, block->icon);
-	FILE *cmdf = popen(block->command, "r");
+	if (block->signal)
+	{
+		output[0] = block->signal;
+		output++;
+	}
+
+	const char *buttonValue = button ? button : "0";
+	const char formatString[] =
+		"/bin/env "
+		"BUTTON=%s "
+		"%s";
+	const size_t commandSize = sizeof(formatString) + strlen(block->command); // should be more than enough
+	char command[commandSize];
+	sprintf(command, formatString, buttonValue, block->command);
+	FILE *cmdf = popen(command, "r");
 	if (!cmdf)
 		return;
 	int i = strlen(block->icon);
@@ -86,17 +100,17 @@ void getcmds(int time)
 	for (unsigned int i = 0; i < LENGTH(blocks); i++) {
 		current = blocks + i;
 		if ((current->interval != 0 && time % current->interval == 0) || time == -1)
-			getcmd(current,statusbar[i]);
+			getcmd(current,statusbar[i], NULL);
 	}
 }
 
-void getsigcmds(unsigned int signal)
+void getsigcmds(unsigned int signal, const char *button)
 {
 	const Block *current;
 	for (unsigned int i = 0; i < LENGTH(blocks); i++) {
 		current = blocks + i;
 		if (current->signal == signal)
-			getcmd(current,statusbar[i]);
+			getcmd(current,statusbar[i], button);
 	}
 }
 
@@ -108,11 +122,18 @@ void setupsignals()
         signal(i, dummysighandler);
 #endif
 
+	struct sigaction sa;
 	for (unsigned int i = 0; i < LENGTH(blocks); i++) {
 		if (blocks[i].signal > 0)
+		{
 			signal(SIGMINUS+blocks[i].signal, sighandler);
+			sigaddset(&sa.sa_mask, SIGRTMIN+blocks[i].signal); // ignore signal when handling SIGUSR1
+		}
 	}
 
+	sa.sa_sigaction = buttonhandler;
+	sa.sa_flags = SA_SIGINFO;
+	sigaction(SIGUSR1, &sa, NULL);
 }
 
 int getstatus(char *str, char *last)
@@ -145,6 +166,13 @@ int setupX()
 	root = RootWindow(dpy, screen);
 	return 1;
 }
+
+void buttonhandler(int sig, siginfo_t *si, void *ucontext)
+{
+	const char button = '0' + si->si_value.sival_int & 0xff;
+	getsigcmds(si->si_value.sival_int >> 8, &button);
+	writestatus();
+}
 #endif
 
 void pstdout()
@@ -180,7 +208,7 @@ void dummysighandler(int signum)
 
 void sighandler(int signum)
 {
-	getsigcmds(signum-SIGPLUS);
+	getsigcmds(signum-SIGPLUS, NULL);
 	writestatus();
 }
 
